---
import type {Course, StudyPlan} from "../types";
import CourseCard from "./CourseCard.astro";
import NavigationControls from "./NavigationControls.astro";
import CourseFilter from "./CourseFilter.astro";
import {api} from "../utils/api";

interface Props {
    studyPlan: StudyPlan;
}

const {studyPlan} = Astro.props;

const courses = await api<Record<number, Course>>(`/study-plans/${Astro.params.studyPlanId}/courses/detailed`);

const academicYears = Array.from({length: studyPlan.duration}, (_, i) => i + 1);
const SEMESTERS_PER_YEAR = 3;
const semesterTypes = ["First", "Second", "Summer"] as const;

const coursesBySemester = new Map<number, number[]>(
    Array.from({length: studyPlan.duration * SEMESTERS_PER_YEAR}, (_, i) => [i + 1, []])
);

Object.entries(studyPlan.coursePlacements ?? {}).forEach(([courseId, semesterNum]) => {
    coursesBySemester.get(Number(semesterNum))?.push(Number(courseId));
});
---

<!--<div class="flex min-h-[75vh] w-full items-center justify-center">-->
<!--    <div class="flex flex-col gap-1 items-center">-->
<!--        <div class="border rounded-lg p-4 text-sm size-fit text-center text-gray-500">-->
<!--            No courses were found-->
<!--        </div>-->
<!--        <a href="/"-->
<!--           class="text-sm flex items-center w-full justify-center gap-2 p-2 pr-3 size-fit rounded cursor-pointer transition-all">-->
<!--            <i data-lucide="chevron-left" class="size-4"/>-->
<!--            <p class="text-nowrap">Back to Main Page</p>-->
<!--        </a>-->
<!--    </div>-->
<!--</div>-->

<div class="space-y-2 relative">
    <CourseFilter sections={studyPlan.sections}/>

    <NavigationControls/>

    <div class="relative">
        <div class="relative">
            <div id="left-hidden-gradient"
                 class="sm:w-5 pointer-events-none absolute left-0 z-20 w-8 h-full bg-gradient-to-r from-white"/>
            <div id="right-hidden-gradient"
                 class="sm:w-5 pointer-events-none absolute right-0 z-20 w-8 h-full bg-gradient-to-l from-white"/>

            <div id="courses-grid" class="flex gap-2 overflow-auto scroll-smooth">
                {academicYears.map(year => {
                    const yearSemesters = semesterTypes.map((_, i) =>
                        year * SEMESTERS_PER_YEAR - (SEMESTERS_PER_YEAR - i) + 1
                    );

                    return (
                            <div>
                                <p class="opacity-60 text-center mb-2 text-xs">Year {year}</p>
                                <div class="flex gap-2">
                                    {yearSemesters.map((semesterNumber, index) => {
                                        const semesterCourses = coursesBySemester.get(semesterNumber);
                                        const semesterTotalCreditHours = semesterCourses?.reduce(
                                            (sum, courseId) => sum + (courses[courseId]?.creditHours || 0),
                                            0
                                        );

                                        return (
                                                <div>
                                                    <p class="opacity-60 text-xs text-center px-2 mb-2 text-nowrap">
                                                        {semesterTypes[index]} - {semesterTotalCreditHours} Cr.
                                                    </p>
                                                    <div class="flex flex-col gap-2">
                                                        {semesterCourses?.map(courseId => {
                                                            const course = courses[courseId];
                                                            if (!course) return;

                                                            return (
                                                                    <CourseCard
                                                                            course={course}
                                                                            prerequisites={studyPlan.coursePrerequisites[course.id] ?? {}}
                                                                            corequisites={studyPlan.courseCorequisites[course.id] ?? []}
                                                                            sequences={studyPlan.courseSequences[course.id] ?? {}}
                                                                    />
                                                            );
                                                        })}
                                                    </div>
                                                </div>
                                        );
                                    })}
                                </div>
                            </div>
                    );

                })}
            </div>
        </div>
    </div>

    <p class="text-center opacity-40 text-sm">
        Remedial, elective, and department approval courses are not included
    </p>
</div>

<style>
    #courses-grid {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    #courses-grid::-webkit-scrollbar {
        display: none;
    }
</style>