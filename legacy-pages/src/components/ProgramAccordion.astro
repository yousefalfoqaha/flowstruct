---
import type {StudyPlanSummary} from "../types";

const {id, code, name, degree, studyPlans} = Astro.props;
---

<program-accordion id={id} data-program={JSON.stringify({id, code, name, degree})}>
    <div class="select-none accordion-trigger flex p-4 items-center group cursor-pointer
                hover:bg-gray-50 active:bg-gray-100 transition-all duration-200">
        <!-- Program Code Badge -->
        <div class="code-chip shrink-0 font-bold rounded-lg py-1.5 px-3 mr-4
                    bg-blue-50 text-blue-700 group-hover:bg-blue-100
                    group-hover:text-blue-800 transition-all text-xs">
            {code}
        </div>

        <!-- Program Info -->
        <div class="min-w-0 flex-1">
            <p class="text-sm font-medium text-gray-900 truncate">{name}</p>
            <p class="text-xs text-gray-500 mt-0.5">{degree}</p>
        </div>

        <!-- Chevron Icon -->
        <div class="shrink-0 ml-4">
            <i data-lucide="chevron-down"
               class="chevron size-5 text-gray-400 transform transition-transform duration-200
                      group-hover:text-gray-600"/>
        </div>
    </div>

    <!-- Accordion Content -->
    <div class="accordion-content grid overflow-hidden transition-all duration-300"
         style="grid-template-rows: 0fr;">
        <div class="min-h-0 bg-gray-50 border-t border-gray-100">
            {studyPlans.length === 0 ? (
                    <div class="p-6 text-sm text-center text-gray-500 flex items-center justify-center gap-2">
                        <i data-lucide="file-x" class="size-4"/>
                        <p>No available study plans</p>
                    </div>
            ) : (
                    <div class="flex flex-wrap gap-2 p-4">
                        {studyPlans.map((studyPlan: StudyPlanSummary) => (
                                <study-plan-chip
                                        id={studyPlan.id}
                                        data-study-plan={JSON.stringify(studyPlan)}
                                        class="group">
                                    <a href={`/study-plans/${studyPlan.id}`}
                                       class="flex items-center gap-3 p-3 pl-4 pr-10 text-sm rounded-xl border bg-white
                                              shadow-sm hover:shadow-md hover:border-blue-200
                                              hover:bg-blue-50/50 active:bg-blue-100/50
                                              relative transition-all duration-200">
                                        <div class="flex flex-col min-w-0">
                                            <span class="font-semibold whitespace-nowrap">
                                                {`${studyPlan.year} / ${studyPlan.year + 1}`}
                                            </span>

                                            {studyPlan.track && (
                                                    <span class="text-xs text-gray-500 mt-0.5 truncate">
                                                        {studyPlan.track}
                                                    </span>
                                            )}
                                        </div>

                                        <div class="absolute right-3 top-1/2 -translate-y-1/2 flex items-center">
                                            <i data-lucide="arrow-right"
                                               class="size-4 text-gray-400 group-hover:text-blue-500 transition-all duration-200"/>
                                        </div>
                                    </a>
                                </study-plan-chip>
                        ))}
                    </div>
            )}
        </div>
    </div>
</program-accordion>

<script>
    class ProgramAccordion extends HTMLElement {
        private accordionTrigger: HTMLElement | null;
        private accordionContent: HTMLElement | null;
        private isOpen: boolean = false;

        constructor() {
            super();
            this.accordionTrigger = this.querySelector('.accordion-trigger');
            this.accordionContent = this.querySelector('.accordion-content');
            this.setupEventListeners();
        }

        private setupEventListeners() {
            this.accordionTrigger?.addEventListener('click', () => this.toggleAccordion());

            // Add keyboard support
            this.accordionTrigger?.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.toggleAccordion();
                }
            });

            // Make trigger focusable
            this.accordionTrigger?.setAttribute('tabindex', '0');
            this.accordionTrigger?.setAttribute('role', 'button');
            this.accordionTrigger?.setAttribute('aria-expanded', 'false');
        }

        private toggleAccordion() {
            if (!this.accordionContent) return;

            this.isOpen = !this.isOpen;

            // Update UI
            this.accordionContent.style.gridTemplateRows = this.isOpen ? '1fr' : '0fr';
            this.accordionTrigger?.querySelector('.chevron')?.classList.toggle('rotate-180');
            this.accordionTrigger?.setAttribute('aria-expanded', this.isOpen.toString());

            // Optional: Add active state to trigger when open
            this.accordionTrigger?.classList.toggle('bg-gray-50', this.isOpen);
        }
    }

    customElements.define('program-accordion', ProgramAccordion);
</script>