---
import type { Course, CourseRelation, CourseSequences } from '../types';

interface Props {
  course: Course;
  prerequisites: Record<number, CourseRelation>;
  corequisites: number[];
  sequences: CourseSequences;
}

const {
  course,
  prerequisites,
  corequisites,
  sequences,
} = Astro.props;
---

<course-card
  id={course.id}
  data-course={
    JSON.stringify({
      ...course,
      prerequisites,
      corequisites,
      sequences: {
        prerequisiteSequence: Array.from(sequences.prerequisiteSequence).filter(id =>
          !Object.prototype.hasOwnProperty.call(prerequisites, id),
        ),
        postrequisiteSequence: Array.from(sequences.postrequisiteSequence),
      },
    })
  }
  class="transition-all duration-300 ease-in-out text-xs lg:text-sm rounded-lg lg:rounded-xl"
>
  <div class="select-none hover:shadow-lg transition-all cursor-pointer relative size-full bg-[#f8f9fb] border hover:bg-blue-50 hover:border-blue-200 hover:drop-shadow-sm
               active:bg-blue-100 lg:p-4 lg:py-3 p-3 py-2 group rounded-lg lg:rounded-xl">
    <h3 class="font-semibold mb-0.5 text-sm lg:text-base">{course.code}</h3>
    <p class="line-clamp-3">{course.name}</p>
    <p
      class="absolute lg:bottom-3 lg:left-3 bottom-2 left-2 font-semibold group-hover:opacity-50 opacity-0 transition-opacity">
      {course.creditHours} Cr.
    </p>
    <p
      class="absolute lg:bottom-3 lg:right-3 bottom-2 right-2 font-semibold group-hover:opacity-50 opacity-0 transition-opacity">
      {course.type}
    </p>
    <button
      class="info-button z-10 rounded-full pointer-events-none group-hover:pointer-events-auto p-2 opacity-0 group-hover:opacity-60 hover:!opacity-100 absolute lg:top-1 lg:right-1 top-0 right-0 cursor-pointer duration-200">
      <i data-lucide="info" class="size-4 lg:size-5" />
    </button>
    <i
      class="indicator absolute lg:top-2 lg:right-2 top-[0.4rem] right-[0.4rem] group-hover:opacity-0 transition-opacity" />
  </div>
</course-card>

<style>
    .selected {
        background-color: #dbeafe;
        border-color: #bfdbfe;
        --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
        --tw-shadow-colored: 0 20px 25px -5px #0000, 0 8px 10px -6px #0000;
        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    }

    .prerequisite {
        background-color: #fdba74;
    }

    .corequisite {
        background-color: #9ca3af;
        color: #ffff;
    }

    .prerequisite-sequence {
        background-color: #fef08a;
    }

    .postrequisite-sequence {
        background-color: #075985;
        color: #ffff;
    }
</style>

<script>
  import type {Course, CourseRelation, CourseSequences} from '../types';
    import {
      createElement,
      ArrowBigRightDash,
      ArrowBigLeftDash,
      ArrowBigLeft,
      ArrowBigUp,
      } from 'lucide';

    interface SerializedCourseSequences {
      prerequisiteSequence: number[];
      postrequisiteSequence: number[];
      }

    interface CourseWithRequisites extends Course {
      prerequisites: Record<number, CourseRelation>;
      corequisites: number[];
      sequences: SerializedCourseSequences;
      }

    const courseCards = document.querySelectorAll('course-card > div');
    let selectedCourse: number | null = null;

    class CourseCard extends HTMLElement {
      private readonly course: CourseWithRequisites;
      constructor() {
        super();
        this.course = JSON.parse(this.dataset.course || '{}');
        this.addEventListener('click', () => {
          this.resetHighlights();

          if (selectedCourse === this.course.id) {
            selectedCourse = null;
            return;
            }
          selectedCourse = this.course.id;

          this.querySelector('div')?.classList.add('selected');
          this.highlightRelatedCourses();
          this.scrollIntoView({behavior: 'smooth', inline: 'center', block: 'center'});
          });

        this.querySelector('.info-button')?.addEventListener('click', (e) => {
          e.stopPropagation();
          window.showCourseDialog(this.course);
          });
        }

      private highlightRelatedCourses = () => {
        const coursesToHighlight = [
          ...Object.keys(this.course.prerequisites).map(id => ({
            id: id,
            className: 'prerequisite',
            icon: ArrowBigLeft,
            })),
          ...this.course.corequisites.map(id => ({
            id: id,
            className: 'corequisite',
            icon: ArrowBigUp,
            })),
          ...this.course.sequences.prerequisiteSequence.map(id => ({
            id: id,
            className: 'prerequisite-sequence',
            icon: ArrowBigLeftDash,
            })),
          ...this.course.sequences.postrequisiteSequence.map(id => ({
            id: id,
            className: 'postrequisite-sequence',
            icon: ArrowBigRightDash,
            })),
          ];

        coursesToHighlight.forEach(({id, className, icon}) => {
          const courseCard = document.querySelector(`course-card[id="${id}"] > div`);
          const indicator = courseCard?.querySelector('.indicator');
          if (!courseCard || !indicator) return;

          courseCard.classList.add(className);
          const iconElement = createElement(icon);
          iconElement.classList.add(
            'opacity-0',
            'transition-opacity',
            'duration-300',
            'size-5',
            'lg:size-6',
            );
          indicator.appendChild(iconElement);

          requestAnimationFrame(() => {
            iconElement.classList.remove('opacity-0');
            });
          });
        };

      private resetHighlights = () => {
        courseCards.forEach(card => {
          card.classList.remove(
            'selected',
            'prerequisite',
            'corequisite',
            'prerequisite-sequence',
            'postrequisite-sequence',
            );

          const indicator = card.querySelector('.indicator');
          if (indicator) indicator.innerHTML = '';
          });
        };
      }

    customElements.define('course-card', CourseCard);
</script>